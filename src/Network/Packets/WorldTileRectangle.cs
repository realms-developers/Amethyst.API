// Code is generated by the Amethyst.PacketGenerator (v1.0.5.0) tool.
// Do not edit this file manually.
#pragma warning disable CA1051

using Amethyst.Network.Core.Packets;
using Amethyst.Network.Structures;
using Amethyst.Network.Utilities;

namespace Amethyst.Network.Packets;

public sealed class WorldTileRectanglePacket : IPacket<WorldTileRectangle>
{
    public int PacketID => 20;

    public WorldTileRectangle Deserialize(ReadOnlySpan<byte> data, int offset = 0)
    {
        FastPacketReader reader = new(data, offset);

        short StartX = reader.ReadInt16();
        short StartY = reader.ReadInt16();
        byte SizeX = reader.ReadByte();
        byte SizeY = reader.ReadByte();
        byte TileChangeType = reader.ReadByte();
        NetTile[,] Tiles = new NetTile[SizeX, SizeY];

        for (int i = 0; i < SizeX; i++)
        for (int j = 0; j < SizeY; j++)
            Tiles[i, j] = new NetTile(reader);

        return new WorldTileRectangle
        {
            StartX = StartX,
            StartY = StartY,
            SizeX = SizeX,
            SizeY = SizeY,
            TileChangeType = TileChangeType,
            Tiles = Tiles,
        };
    }

    public byte[] Serialize(WorldTileRectangle packet)
    {
        FastPacketWriter writer = new(20, 128);

        writer.WriteInt16(packet.StartX);
        writer.WriteInt16(packet.StartY);
        writer.WriteByte(packet.SizeX);
        writer.WriteByte(packet.SizeY);
        writer.WriteByte(packet.TileChangeType);
        for (int i = 0; i < packet.SizeX; i++)
        for (int j = 0; j < packet.SizeY; j++)
            packet.Tiles[i, j].Serialize(writer);

        return writer.BuildPacket();
    }
}

public struct WorldTileRectangle
{
    public short StartX;
    public short StartY;
    public byte SizeX;
    public byte SizeY;
    public byte TileChangeType;
    public NetTile[,] Tiles;
}
