// Code is generated by the Amethyst.PacketGenerator (v1.0.5.0) tool.
// Do not edit this file manually.
#pragma warning disable CA1051

using Amethyst.Network.Engine.Packets;
using Amethyst.Network.Structures;
using Amethyst.Network.Utilities;
using Terraria;

namespace Amethyst.Network.Packets;

public sealed class NPCUpdatePacket : IPacket<NPCUpdate>
{
    public int PacketID => 23;

    public static NPCUpdate Deserialize(ReadOnlySpan<byte> data, int offset = 0)
    {
        FastPacketReader reader = new(data, offset);

        short npcIndex = reader.ReadInt16();
        NetVector2 position = reader.ReadNetVector2();
        NetVector2 velocity = reader.ReadNetVector2();
        ushort target = reader.ReadUInt16();
        if (target == 65535)
        {
            target = 0;
        }
        NetBitsByte bitsByte1 = reader.ReadByte();
        NetBitsByte bitsByte2 = reader.ReadByte();
        float[] ai = new float[NPC.maxAI];
        for (int i = 0; i < NPC.maxAI; i++)
        {
            if (bitsByte1[i + 2])
            {
                ai[i] = reader.ReadSingle();
            }
            else
            {
                ai[i] = 0f;
            }
        }
        short netID = reader.ReadInt16();
        byte? playerCountForMultiplayerDifficultyOverride = 1;
        if (bitsByte2[0])
        {
            playerCountForMultiplayerDifficultyOverride = reader.ReadByte();
        }
        float strengthMultiplier = 1f;
        if (bitsByte2[2])
        {
            strengthMultiplier = reader.ReadSingle();
        }
        int life = 0;
        if (!bitsByte1[7])
        {
            life = reader.ReadByte() switch
            {
                2 => reader.ReadInt16(),
                4 => reader.ReadInt32(),
                _ => reader.ReadSByte(),
            };
        }

        return new NPCUpdate
        {
            NPCIndex = npcIndex,
            Position = position,
            Velocity = velocity,
            Target = target,
            BitsByte1 = bitsByte1,
            BitsByte2 = bitsByte2,
            AI = ai,
            NetID = netID,
            PlayerCountForMultiplayerDifficultyOverride = playerCountForMultiplayerDifficultyOverride,
            StrengthMultiplier = strengthMultiplier,
            Life = life
        };
    }

    public static byte[] Serialize(NPCUpdate packet)
    {
        FastPacketWriter writer = new(23, 256);

        writer.WriteInt16(packet.NPCIndex);
        writer.WriteNetVector2(packet.Position);
        writer.WriteNetVector2(packet.Velocity);
        writer.WriteUInt16(packet.Target == 0 ? (ushort)65535 : packet.Target);
        writer.WriteByte(packet.BitsByte1);
        writer.WriteByte(packet.BitsByte2);
        for (int i = 0; i < NPC.maxAI; i++)
        {
            if (packet.BitsByte1[i + 2])
            {
                writer.WriteSingle(packet.AI[i]);
            }
        }
        writer.WriteInt16(packet.NetID);
        if (packet.BitsByte2[0])
        {
            writer.WriteByte(packet.PlayerCountForMultiplayerDifficultyOverride ?? 1);
        }
        if (packet.BitsByte2[2])
        {
            writer.WriteSingle(packet.StrengthMultiplier);
        }
        if (!packet.BitsByte1[7])
        {
            byte b2 = 1;
            if (packet.Life > 32767)
            {
                b2 = 4;
            }
            else if (packet.Life > 127)
            {
                b2 = 2;
            }
            writer.WriteByte(b2);
            switch (b2)
            {
                case 2:
                    writer.WriteInt16((short)packet.Life);
                    break;
                case 4:
                    writer.WriteInt32(packet.Life);
                    break;
                default:
                    writer.WriteSByte((sbyte)packet.Life);
                    break;
            }
        }
        if (packet.NetID >= 0 && packet.NetID < 688 && Main.npcCatchable[packet.NetID])
        {
            writer.WriteByte(packet.PlayerCountForMultiplayerDifficultyOverride ?? 0);
        }

        return writer.Build();
    }
}

public struct NPCUpdate
{
    public short NPCIndex;
    public NetVector2 Position;
    public NetVector2 Velocity;
    public ushort Target;
    public NetBitsByte BitsByte1;
    public NetBitsByte BitsByte2;
    public float[] AI;
    public short NetID;
    public byte? PlayerCountForMultiplayerDifficultyOverride;
    public float StrengthMultiplier;
    public int Life;
}
