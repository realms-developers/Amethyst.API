// Code is generated by the Amethyst.PacketGenerator (v1.0.5.0) tool.
// Do not edit this file manually.
#pragma warning disable CA1051

using Amethyst.Network.Core.Packets;
using Amethyst.Network.Utilities;

namespace Amethyst.Network.Packets;

public sealed class ChestSyncPacket : IPacket<ChestSync>
{
    public int PacketID => 33;

    public ChestSync Deserialize(ReadOnlySpan<byte> data, int offset = 0)
    {
        FastPacketReader reader = new(data, offset);

        short ChestIndex = reader.ReadInt16();
        short ChestX = reader.ReadInt16();
        short ChestY = reader.ReadInt16();
        byte NameLength = reader.ReadByte();
        string Name = string.Empty;
        if (NameLength > 0 & NameLength <= 20)
        {
            Name = reader.ReadString();

            if (Name.Length != NameLength)
                Name = string.Empty;
        }

        return new ChestSync
        {
            ChestIndex = ChestIndex,
            ChestX = ChestX,
            ChestY = ChestY,
            Name = Name,
        };
    }

    public byte[] Serialize(ChestSync packet)
    {
        FastPacketWriter writer = new(33, 128);

        writer.WriteInt16(packet.ChestIndex);
        writer.WriteInt16(packet.ChestX);
        writer.WriteInt16(packet.ChestY);

        writer.WriteByte((byte)(packet.Name?.Length ?? 0));
        writer.WriteString(packet.Name ?? string.Empty);

        return writer.BuildPacket();
    }
}

public struct ChestSync
{
    public short ChestIndex;
    public short ChestX;
    public short ChestY;

    public string? Name;
}
