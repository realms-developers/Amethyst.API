// Code is generated by the Amethyst.PacketGenerator (v1.0.5.0) tool.
// Do not edit this file manually.
#pragma warning disable CA1051

using Amethyst.Network.Engine.Packets;
using Amethyst.Network.Structures;
using Amethyst.Network.Utilities;

namespace Amethyst.Network.Packets;

public sealed class SoundPlayPacket : IPacket<SoundPlay>
{
    public int PacketID => 132;

    public static SoundPlay Deserialize(ReadOnlySpan<byte> data, int offset = 0)
    {
        FastPacketReader reader = new(data, offset);

        NetVector2 Position = reader.ReadNetVector2();
        ushort SoundKey = reader.ReadUInt16();
        NetBitsByte Flags = reader.ReadByte();
        int? Style = Flags[0] ? reader.ReadInt32() : null;
        float? Volume = Flags[1] ? Math.Clamp(reader.ReadSingle(), 0f, 1f) : null;
        float? Pitch = Flags[2] ? Math.Clamp(reader.ReadSingle(), -1f, 1f) : null;

        return new SoundPlay
        {
            Position = Position,
            SoundKey = SoundKey,
            Flags = Flags,
            Style = Style,
            Volume = Volume,
            Pitch = Pitch,
        };
    }

    public static byte[] Serialize(SoundPlay packet)
    {
        FastPacketWriter writer = new(132, 128);

        writer.WriteNetVector2(packet.Position);
        writer.WriteUInt16(packet.SoundKey);
        writer.WriteByte(packet.Flags);
        NetBitsByte flags = packet.Flags;
        if (flags[0])
            writer.WriteInt32(packet.Style ?? 0);

        if (flags[1])
            writer.WriteSingle(packet.Volume.HasValue ? Math.Clamp(packet.Volume.Value, 0f, 1f) : 0f);

        if (flags[2])
            writer.WriteSingle(packet.Pitch.HasValue ? Math.Clamp(packet.Pitch.Value, -1f, 1f) : 0f);

        return writer.BuildPacket();
    }
}

public struct SoundPlay
{
    public NetVector2 Position;
    public ushort SoundKey;
    public byte Flags;
    public int? Style;
    public float? Volume;
    public float? Pitch;
}
