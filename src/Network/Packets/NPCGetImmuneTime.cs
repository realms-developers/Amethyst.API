// Code is generated by the Amethyst.PacketGenerator (v1.0.5.0) tool.
// Do not edit this file manually.
#pragma warning disable CA1051

using Amethyst.Network.Core.Packets;
using Amethyst.Network.Utilities;

namespace Amethyst.Network.Packets;

public sealed class NPCGetImmuneTimePacket : IPacket<NPCGetImmuneTime>
{
    public int PacketID => 131;

    public NPCGetImmuneTime Deserialize(ReadOnlySpan<byte> data, int offset = 0)
    {
        FastPacketReader reader = new(data, offset);

        ushort NPCIndex = reader.ReadUInt16();
        if (reader.ReadByte() == 1)
        {
            int? Time = reader.ReadInt32();
            short? FromWho = reader.ReadInt16();
            return new NPCGetImmuneTime
            {
                NPCIndex = NPCIndex,
                Time = Time,
                FromWho = FromWho,
            };
        }

        return new NPCGetImmuneTime
        {
            NPCIndex = NPCIndex
        };
    }

    public byte[] Serialize(NPCGetImmuneTime packet)
    {
        FastPacketWriter writer = new(131, 128);

        writer.WriteUInt16(packet.NPCIndex);
        bool hasValues = packet.Time.HasValue || packet.FromWho.HasValue;
        writer.WriteByte(hasValues ? (byte)1 : (byte)0);
        if (hasValues)
        {
            writer.WriteInt32(packet.Time!.Value);
            writer.WriteInt16(packet.FromWho!.Value);
        }

        return writer.BuildPacket();
    }
}

public struct NPCGetImmuneTime
{
    public ushort NPCIndex;
    public int? Time;
    public short? FromWho;
}
