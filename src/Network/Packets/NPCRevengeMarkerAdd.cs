// Code is generated by the Amethyst.PacketGenerator (v1.0.5.0) tool.
// Do not edit this file manually.
#pragma warning disable CA1051

using Amethyst.Network.Engine.Packets;
using Amethyst.Network.Structures;
using Amethyst.Network.Utilities;

namespace Amethyst.Network.Packets;

public sealed class NPCRevengeMarkerAddPacket : IPacket<NPCRevengeMarkerAdd>
{
    public int PacketID => 126;

    public static NPCRevengeMarkerAdd Deserialize(ReadOnlySpan<byte> data, int offset = 0)
    {
        FastPacketReader reader = new(data, offset);

        int UniqueID = reader.ReadInt32();
        NetVector2 Position = reader.ReadNetVector2();
        int NPCNetID = reader.ReadInt32();
        float NPCLifePercent = reader.ReadSingle();
        int NPCType = reader.ReadInt32();
        int NPCAIStyle = reader.ReadInt32();
        int CoinValue = reader.ReadInt32();
        float BaseValue = reader.ReadSingle();
        bool IsSpawnedFromStatue = reader.ReadBoolean();

        return new NPCRevengeMarkerAdd
        {
            UniqueID = UniqueID,
            Position = Position,
            NPCNetID = NPCNetID,
            NPCLifePercent = NPCLifePercent,
            NPCType = NPCType,
            NPCAIStyle = NPCAIStyle,
            CoinValue = CoinValue,
            BaseValue = BaseValue,
            IsSpawnedFromStatue = IsSpawnedFromStatue,
        };
    }

    public static byte[] Serialize(NPCRevengeMarkerAdd packet)
    {
        FastPacketWriter writer = new(126, 128);

        writer.WriteInt32(packet.UniqueID);
        writer.WriteNetVector2(packet.Position);
        writer.WriteInt32(packet.NPCNetID);
        writer.WriteSingle(packet.NPCLifePercent);
        writer.WriteInt32(packet.NPCType);
        writer.WriteInt32(packet.NPCAIStyle);
        writer.WriteInt32(packet.CoinValue);
        writer.WriteSingle(packet.BaseValue);
        writer.WriteBoolean(packet.IsSpawnedFromStatue);

        return writer.BuildPacket();
    }
}

public struct NPCRevengeMarkerAdd
{
    public int UniqueID;
    public NetVector2 Position;
    public int NPCNetID;
    public float NPCLifePercent;
    public int NPCType;
    public int NPCAIStyle;
    public int CoinValue;
    public float BaseValue;
    public bool IsSpawnedFromStatue;
}
