// Code is generated by the Amethyst.PacketGenerator (v1.0.5.0) tool.
// Do not edit this file manually.
#pragma warning disable CA1051

using Amethyst.Network.Engine.Packets;
using Amethyst.Network.Structures;
using Amethyst.Network.Utilities;

namespace Amethyst.Network.Packets;

public sealed class PlayerUpdatePacket : IPacket<PlayerUpdate>
{
    public int PacketID => 13;

    public static PlayerUpdate Deserialize(ReadOnlySpan<byte> data, int offset = 0)
    {
        FastPacketReader reader = new(data, offset);

        /*
            				Player player10 = Main.player[num138];
				BitsByte bitsByte7 = reader.ReadByte();
				BitsByte bitsByte8 = reader.ReadByte();
				BitsByte bitsByte9 = reader.ReadByte();
				BitsByte bitsByte10 = reader.ReadByte();
				player10.controlUp = bitsByte7[0];
				player10.controlDown = bitsByte7[1];
				player10.controlLeft = bitsByte7[2];
				player10.controlRight = bitsByte7[3];
				player10.controlJump = bitsByte7[4];
				player10.controlUseItem = bitsByte7[5];
				player10.direction = (bitsByte7[6] ? 1 : (-1));
				if (bitsByte8[0])
				{
					player10.pulley = true;
					player10.pulleyDir = (byte)((!bitsByte8[1]) ? 1u : 2u);
				}
				else
				{
					player10.pulley = false;
				}
				player10.vortexStealthActive = bitsByte8[3];
				player10.gravDir = (bitsByte8[4] ? 1 : (-1));
				player10.TryTogglingShield(bitsByte8[5]);
				player10.ghost = bitsByte8[6];
				player10.selectedItem = reader.ReadByte();
				player10.position = reader.ReadVector2();
				if (bitsByte8[2])
				{
					player10.velocity = reader.ReadVector2();
				}
				else
				{
					player10.velocity = Vector2.Zero;
				}
				if (bitsByte9[6])
				{
					player10.PotionOfReturnOriginalUsePosition = reader.ReadVector2();
					player10.PotionOfReturnHomePosition = reader.ReadVector2();
				}
				else
				{
					player10.PotionOfReturnOriginalUsePosition = null;
					player10.PotionOfReturnHomePosition = null;
				}
        */

        byte PlayerIndex = reader.ReadByte();
        byte Flags = reader.ReadByte();
        byte Flags2 = reader.ReadByte();
        byte Flags3 = reader.ReadByte();
        byte Flags4 = reader.ReadByte();
        byte SelectedItem = reader.ReadByte();
        NetVector2 Position = reader.ReadNetVector2();
        NetVector2? Velocity = null;
        if ((Flags2 & 0b00000100) != 0)
        {
            Velocity = reader.ReadNetVector2();
        }
        NetVector2? PotionOriginalPosition = null;
        NetVector2? PotionHomePosition = null;
        if ((Flags3 & 0b01000000) != 0)
        {
            PotionOriginalPosition = reader.ReadNetVector2();
            PotionHomePosition = reader.ReadNetVector2();
        }

        return new PlayerUpdate
        {
            PlayerIndex = PlayerIndex,
            Flags = Flags,
            Flags2 = Flags2,
            Flags3 = Flags3,
            Flags4 = Flags4,
            SelectedItem = SelectedItem,
            Position = Position,
            Velocity = Velocity,
            PotionOriginalPosition = PotionOriginalPosition,
            PotionHomePosition = PotionHomePosition,
        };
    }

    public static byte[] Serialize(PlayerUpdate packet)
    {
        FastPacketWriter writer = new(13, 128);

        writer.WriteByte(packet.PlayerIndex);
        writer.WriteByte(packet.Flags);
        writer.WriteByte(packet.Flags2);
        writer.WriteByte(packet.Flags3);
        writer.WriteByte(packet.Flags4);
        writer.WriteByte(packet.SelectedItem);
        writer.WriteNetVector2(packet.Position);
        if ((packet.Flags2 & 0b00000100) != 0 && packet.Velocity.HasValue)
        {
            writer.WriteNetVector2(packet.Velocity ?? new(0f, 0f));
        }

        if ((packet.Flags3 & 0b01000000) != 0)
        {
            writer.WriteNetVector2(packet.PotionOriginalPosition ?? new(0f, 0f));
            writer.WriteNetVector2(packet.PotionHomePosition ?? new(0f, 0f));
        }

        return writer.BuildPacket();
    }
}

public struct PlayerUpdate
{
    public byte PlayerIndex;
    public byte Flags;
    public byte Flags2;
    public byte Flags3;
    public byte Flags4;
    public byte SelectedItem;
    public NetVector2 Position;
    public NetVector2? Velocity;
    public NetVector2? PotionOriginalPosition;
    public NetVector2? PotionHomePosition;
}
