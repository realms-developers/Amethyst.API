// Code is generated by the Amethyst.PacketGenerator (v1.0.5.0) tool.
// Do not edit this file manually.
#pragma warning disable CA1051

using Amethyst.Network.Engine.Packets;
using Amethyst.Network.Structures;
using Amethyst.Network.Utilities;

namespace Amethyst.Network.Packets;

public sealed class ShimmerEffectPacket : IPacket<ShimmerEffect>
{
    public int PacketID => 146;

    public static ShimmerEffect Deserialize(ReadOnlySpan<byte> data, int offset = 0)
    {
        FastPacketReader reader = new(data, offset);

        byte EffectType = reader.ReadByte();
        NetVector2? ItemShimmerPosition = null;
        NetVector2? CoinPosition = null;
        int? CoinAmount = null;
        int? NPCIndex = null;

        switch (EffectType)
        {
            case 0:
                ItemShimmerPosition = reader.ReadNetVector2();
                break;

            case 1:
                CoinPosition = reader.ReadNetVector2();
                CoinAmount = reader.ReadInt32();
                break;

            case 2:
                NPCIndex = reader.ReadInt32();
                break;
        }

        return new ShimmerEffect
        {
            EffectType = EffectType,
            ItemShimmerPosition = ItemShimmerPosition,
            CoinPosition = CoinPosition,
            CoinAmount = CoinAmount,
            NPCIndex = NPCIndex,
        };
    }

    public static byte[] Serialize(ShimmerEffect packet)
    {
        FastPacketWriter writer = new(146, 128);

        writer.WriteByte(packet.EffectType);

        switch (packet.EffectType)
        {
            case 0:
                if (packet.ItemShimmerPosition.HasValue)
                {
                    writer.WriteNetVector2(packet.ItemShimmerPosition.Value);
                }
                else
                {
                    writer.WriteNetVector2(default);
                }
                break;

            case 1:
                if (packet.CoinPosition.HasValue)
                {
                    writer.WriteNetVector2(packet.CoinPosition.Value);
                }
                else
                {
                    writer.WriteNetVector2(default);
                }
                writer.WriteInt32(packet.CoinAmount ?? 0);
                break;

            case 2:
                writer.WriteInt32(packet.NPCIndex ?? -1);
                break;
        }

        return writer.BuildPacket();
    }
}

public struct ShimmerEffect
{
    public byte EffectType;
    public NetVector2? ItemShimmerPosition;
    public NetVector2? CoinPosition;
    public int? CoinAmount;
    public int? NPCIndex;
}
