// Code is generated by the Amethyst.PacketGenerator (v1.0.5.0) tool.
// Do not edit this file manually.
#pragma warning disable CA1051

using Amethyst.Server.Network.Core.Packets;
using Amethyst.Server.Network.Utilities;

namespace Amethyst.Server.Network.Packets;

public sealed class NPCUpdatePacket : IPacket<NPCUpdate>
{
    public int PacketID => 23;

    public NPCUpdate Deserialize(ReadOnlySpan<byte> data, int offset = 0)
    {
        FastPacketReader reader = new(data, offset);

        byte ... = reader.ReadByte();
        short NPCIndex = reader.ReadInt16();
        NetVector2 Position = reader.ReadNetVector2();
        NetVector2 Velocity = reader.ReadNetVector2();
        ushort Target = reader.ReadUInt16();
        byte Flags = reader.ReadByte();
        byte Flags2 = reader.ReadByte();
        float[] AI = reader.ReadUNKNOWN();
        short NPCType = reader.ReadInt16();
        byte PlayerCountDifficultyOverridefloat = reader.ReadByte();
        StrengthMultiplierOverrideint NPCLifebyte = reader.ReadUNKNOWN();

        return new NPCUpdate
        {
            ... = ...,
            NPCIndex = NPCIndex,
            Position = Position,
            Velocity = Velocity,
            Target = Target,
            Flags = Flags,
            Flags2 = Flags2,
            AI = AI,
            NPCType = NPCType,
            PlayerCountDifficultyOverridefloat = PlayerCountDifficultyOverridefloat,
            NPCLifebyte = NPCLifebyte,
        };
    }

    public byte[] Serialize(NPCUpdate packet)
    {
        FastPacketWriter writer = new(23, 128);

        writer.WriteByte(packet....);
        writer.WriteInt16(packet.NPCIndex);
        writer.WriteNetVector2(packet.Position);
        writer.WriteNetVector2(packet.Velocity);
        writer.WriteUInt16(packet.Target);
        writer.WriteByte(packet.Flags);
        writer.WriteByte(packet.Flags2);
        writer.WriteUNKNOWN(packet.AI);
        writer.WriteInt16(packet.NPCType);
        writer.WriteByte(packet.PlayerCountDifficultyOverridefloat);
        writer.WriteUNKNOWN(packet.NPCLifebyte);

        return writer.BuildPacket();
    }
}

public struct NPCUpdate
{
    public byte ...;
    public short NPCIndex;
    public NetVector2 Position;
    public NetVector2 Velocity;
    public ushort Target;
    public byte Flags;
    public byte Flags2;
    public float[] AI;
    public short NPCType;
    public byte PlayerCountDifficultyOverridefloat;
    public StrengthMultiplierOverrideint NPCLifebyte;
}